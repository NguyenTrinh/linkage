
/*
 *	This file was automatically generated by dbusxx-xml2cpp; DO NOT EDIT!
 */

#ifndef __dbusxx__DBusGlue_h__PROXY_MARSHAL_H
#define __dbusxx__DBusGlue_h__PROXY_MARSHAL_H

#include <dbus-c++/dbus.h>

namespace org {
namespace linkage {

class TorrentProxy
 : public ::DBus::InterfaceProxy
{
public:

    TorrentProxy()
    : ::DBus::InterfaceProxy("org.linkage.Torrent")
    {
    }

public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    ::DBus::String GetName(  )
    {
        ::DBus::CallMessage call;
        call.member("GetName");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::String argout;
        ri >> argout;
        return argout;
    }

    ::DBus::String GetState(  )
    {
        ::DBus::CallMessage call;
        call.member("GetState");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::String argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< ::DBus::UInt32, ::DBus::UInt32 > GetRates(  )
    {
        ::DBus::CallMessage call;
        call.member("GetRates");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< ::DBus::UInt32, ::DBus::UInt32 > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Struct< ::DBus::UInt64, ::DBus::UInt64 > GetTransfered(  )
    {
        ::DBus::CallMessage call;
        call.member("GetTransfered");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Struct< ::DBus::UInt64, ::DBus::UInt64 > argout;
        ri >> argout;
        return argout;
    }

    ::DBus::Double GetProgress(  )
    {
        ::DBus::CallMessage call;
        call.member("GetProgress");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Double argout;
        ri >> argout;
        return argout;
    }

    ::DBus::UInt32 GetPosition(  )
    {
        ::DBus::CallMessage call;
        call.member("GetPosition");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::UInt32 argout;
        ri >> argout;
        return argout;
    }

    void Start(  )
    {
        ::DBus::CallMessage call;
        call.member("Start");
        ::DBus::Message ret = invoke_method(call);
    }

    void Stop(  )
    {
        ::DBus::CallMessage call;
        call.member("Stop");
        ::DBus::Message ret = invoke_method(call);
    }

    void Remove( const ::DBus::Bool& erase_data )
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << erase_data;
        call.member("Remove");
        ::DBus::Message ret = invoke_method(call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
namespace org {
namespace linkage {

class InterfaceProxy
 : public ::DBus::InterfaceProxy
{
public:

    InterfaceProxy()
    : ::DBus::InterfaceProxy("org.linkage.Interface")
    {
    }

public:

    /* methods exported by this interface,
     * this functions will invoke the corresponding methods on the remote objects
     */
    void Open( const ::DBus::String& file )
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << file;
        call.member("Open");
        ::DBus::Message ret = invoke_method(call);
    }

    void Add( const ::DBus::String& file, const ::DBus::String& path )
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << file;
        wi << path;
        call.member("Add");
        ::DBus::Message ret = invoke_method(call);
    }

    ::DBus::Bool GetVisible(  )
    {
        ::DBus::CallMessage call;
        call.member("GetVisible");
        ::DBus::Message ret = invoke_method(call);
        ::DBus::MessageIter ri = ret.reader();

        ::DBus::Bool argout;
        ri >> argout;
        return argout;
    }

    void SetVisible( const ::DBus::Bool& visible )
    {
        ::DBus::CallMessage call;
        ::DBus::MessageIter wi = call.writer();

        wi << visible;
        call.member("SetVisible");
        ::DBus::Message ret = invoke_method(call);
    }

    void Quit(  )
    {
        ::DBus::CallMessage call;
        call.member("Quit");
        ::DBus::Message ret = invoke_method(call);
    }


public:

    /* signal handlers for this interface
     */

private:

    /* unmarshalers (to unpack the DBus message before calling the actual signal handler)
     */
};

} } 
#endif//__dbusxx__DBusGlue_h__PROXY_MARSHAL_H
